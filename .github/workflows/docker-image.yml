name: CICD_Hello_apps

on:
  push:
    branches: [ master ]

env:
  AWS_REGION_NAME:        "eu-central-1"
  and_exam_webserver1_id: "i-0dfeddfbfeb6b1307"
  and_exam_webserver2_id: "i-0d82503bf53a1cd64"
  py_docker-image:        "${{ secrets.DOCKER_HUB_ACCOUNT }}/pyapp:${{ github.sha }}"
  go_docker-image:        "${{ secrets.DOCKER_HUB_ACCOUNT }}/goapp:${{ github.sha }}"

jobs:
  build_and_push_docker_images:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: send Telegram message on push
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ${{ github.actor }} created commit: ${{ github.sha }}
          Commit message: ${{ github.event.commits[0].message }}
          Start to build images        
        
    - name: Build Python app Docker image
      run: |
        echo "::notice::${{ github.actor }} created commit: ${{ github.sha }}"
        echo "::notice::Commit message: ${{ github.event.commits[0].message }}"
        echo "::notice::Start to build images"
        cd ./py_program_1 && docker build . -t ${{ env.py_docker-image }} -f ../dockerfiles/PyDockerfile
    
    - name: Build Golang app Docker image
      run: cd ./go_program_2 && docker build . -t ${{ env.go_docker-image }} -f ../dockerfiles/GoDockerfile
    
    - name: Login to Docker Hub
      run: docker login -u ${{ secrets.DOCKER_HUB_ACCOUNT }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
    
    - name: send Telegram message on successfull build
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Images are ready now. Pushing them to Docker Hub
    
    - name: Push images to Docker Hub repo
      run: |
        echo "::notice::Images are ready now. Pushing them to Docker Hub"
        docker push ${{ env.py_docker-image }}
        docker push ${{ env.go_docker-image }}
        echo "::notice::Push has been done"
    
    - name: send Telegram message on push to Docker Hub
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Push has been done      
  
  website_acceptance_test:
    runs-on: ubuntu-latest
    needs: [ build_and_push_docker_images ]
    outputs:
      output1: ${{ steps.set_results.outputs.test1 }}
      output2: ${{ steps.set_results.outputs.test2 }}
    
    steps:
    - name: send Telegram message on test start
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Test job now starts
    
    - name: Pull Docker image
      run: |
        echo "::notice::Test job now starts"
        docker pull ${{ env.py_docker-image }} 
        docker pull ${{ env.go_docker-image }}
    
    - name: Start docker containers
      run: | 
        docker run -d -p 8080:8080 ${{ env.py_docker-image }}
        docker run -d -p 8081:8080 ${{ env.go_docker-image }}
    
    - id: set_results
      continue-on-error: true
      run: |
        sleep 5 # curl fails if called immediately without time delay
        echo "::set-output name=test1::$(curl http://localhost:8080 -sS 2>/dev/null)"
        echo "::set-output name=test2::$(curl http://localhost:8081 -sS 2>/dev/null)"
    
    - name: send Telegram message on test results
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: | 
          Test has been completed.
          cURL returns the following contents from the web pages
          python webapp: ${{ steps.set_results.outputs.test1 }}
          golang webapp: ${{ steps.set_results.outputs.test2 }}
    
    - name: Print message about test results to log
      run: |
        echo "::notice::Test has been completed."
        echo "::notice::cURL returns the following contents from the web pages"
        echo "::notice::python webapp: ${{ steps.set_results.outputs.test1 }}"
        echo "::notice::golang webapp: ${{ steps.set_results.outputs.test2 }}"

  deploy_in_aws:
    runs-on: ubuntu-latest
    needs: [ build_and_push_docker_images, website_acceptance_test ]
    # deploy only if test passed i.e. curl returns something from webserver 
    if: |
      needs.website_acceptance_test.outputs.output1 != '' &&
      needs.website_acceptance_test.outputs.output2 != ''
    
    steps:
    - name: install AWS CLI
      run: |
        echo "::notice::Installing AWS CLI"
        sudo apt-get install awscli -y
        aws --version
    
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION_NAME }}
    
    - name: send Telegram message on AWS EC2 instances start
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Starting webservers in the cloud
    
    - name: Start webservers
      run: |
        echo "::notice::Starting webservers in the cloud"
        aws ec2 start-instances --instance-ids ${{ env.and_exam_webserver1_id }} ${{ env.and_exam_webserver2_id }}  
        
    - id: get_webservers_ip
      run: |
        # let some time for AWS EC2 to get up and running:
        echo "::notice::waiting for EC2 instances to get up and running"
        aws ec2 wait instance-status-ok --instance-ids ${{ env.and_exam_webserver1_id }}
        aws ec2 wait instance-status-ok --instance-ids ${{ env.and_exam_webserver2_id }}
        echo "::set-output name=server1_public_ip::$(aws ec2 describe-instances --filters 'Name=instance-id,Values= ${{ env.and_exam_webserver1_id }}' --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)"
        echo "::set-output name=server2_public_ip::$(aws ec2 describe-instances --filters 'Name=instance-id,Values= ${{ env.and_exam_webserver2_id }}' --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)"
    
    - name: send Telegram message on AWS EC2 up and running
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          AWS EC2 instances are now up and running:
          webserver1: ${{ env.and_exam_webserver1_id }} @ ${{ steps.get_webservers_ip.outputs.server1_public_ip }}
          webserver2: ${{ env.and_exam_webserver2_id }} @ ${{ steps.get_webservers_ip.outputs.server2_public_ip }}
          Now pulling images to this servers and starting webapps on them
    
    - name: stop and remove runnung docker containers # if servers were already running prior commit
      run: |
        echo "::notice::stop and remove runnung docker containers from EC2 if any"
        aws ssm send-command --document-name "AWS-RunShellScript" --parameters 'commands=["docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"]' --targets "Key=instanceids,Values=${{ env.and_exam_webserver1_id }}" --comment "stop and rm docker containers"
        aws ssm send-command --document-name "AWS-RunShellScript" --parameters 'commands=["docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)"]' --targets "Key=instanceids,Values=${{ env.and_exam_webserver2_id }}" --comment "stop and rm docker containers"
    
    - name: pull docker images to EC2 webserver1 and webserver2 and start containers
      run: |
        aws ssm send-command --document-name "AWS-RunShellScript" --parameters 'commands=["docker pull ${{ env.py_docker-image }} && docker run -d -p 80:8080 ${{ env.py_docker-image }}"]' --targets "Key=instanceids,Values=${{ env.and_exam_webserver1_id }}" --comment "pull image and run docker container"
        aws ssm send-command --document-name "AWS-RunShellScript" --parameters 'commands=["docker pull ${{ env.go_docker-image }} && docker run -d -p 80:8080 ${{ env.go_docker-image }}"]' --targets "Key=instanceids,Values=${{ env.and_exam_webserver2_id }}" --comment "pull image and run docker container"
    
    - name: send Telegram message on webapps ready
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          webserver1 now ready to serve @ ${{ steps.get_webservers_ip.outputs.server1_public_ip }}:80
          webserver2 now ready to serve @ ${{ steps.get_webservers_ip.outputs.server2_public_ip }}:80
    
    - name: Print webserver1 and webserver2 public IPs
      run: |
        echo "::notice::webserver1 (ID: ${{ env.and_exam_webserver1_id }}) ready to serve @ ${{ steps.get_webservers_ip.outputs.server1_public_ip }}:80"
        echo "::notice::webserver2 (ID: ${{ env.and_exam_webserver2_id }}) ready to serve @ ${{ steps.get_webservers_ip.outputs.server2_public_ip }}:80"
